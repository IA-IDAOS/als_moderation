import streamlit as st
import bcrypt
import streamlit_authenticator as stauth
import openai
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import pandas as pd
import os

# Configuration du client OpenAI avec la cl√© API et les d√©tails du projet
openai.api_key = os.getenv('OPENAI_API_KEY')
# V√©rifier si la cl√© API est r√©cup√©r√©e correctement
if openai.api_key is None:
    print("La cl√© API n'est pas d√©finie.")
else:
    print("La cl√© API est d√©finie.")

# D√©finir les fonctions load_data et preprocess_data
def load_data(filepath):
    return pd.read_csv(filepath)

def preprocess_data(df):
    df['Questions'] = df['Questions'].astype(str)
    df['R√©ponses'] = df['R√©ponses'].astype(str)
    df['Services'] = df['Services'].astype(str)
    df['Probl√©matiques'] = df['Probl√©matiques'].astype(str)
    return df

@st.cache_data
def load_embeddings(df):
    embeddings = []
    try:
        response = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=df['Questions'].tolist()
        )
        embeddings = [record['embedding'] for record in response['data']]
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation des embeddings : {e}")
        return np.array([])  # Retourner un tableau vide en cas d'erreur
    return np.array(embeddings)

def get_embedding(text):
    try:
        response = openai.Embedding.create(
            model="text-embedding-ada-002",
            input=[text]
        )
        return np.array(response['data'][0]['embedding'])
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation de l'embedding : {e}")
        return np.array([])  # Retourner un tableau vide en cas d'erreur

def find_most_similar_question(user_question, df, question_embeddings):
    user_vector = get_embedding(user_question)
    if user_vector.size == 0 or question_embeddings.size == 0:
        st.error("Erreur lors du calcul des similarit√©s.")
        return None, 0

    similarities = cosine_similarity([user_vector], question_embeddings)[0]
    most_similar_idx = np.argmax(similarities)
    most_similar_question = df['Questions'].iloc[most_similar_idx]
    similarity_score = similarities[most_similar_idx]
    return most_similar_question, similarity_score

def generate_response_with_gpt(question, context):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Vous √™tes un assistant utile."},
                {"role": "user", "content": f"Contexte : {context}\nQuestion : {question}\nR√©ponse :"}
            ],
            max_tokens=150
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration de la r√©ponse avec GPT : {e}")
        return None

def generate_fallback_response(question):
    try:
        context = "Je n'ai pas trouv√© de r√©ponse sp√©cifique dans la base de donn√©es. Bas√© sur les informations des FAQ suivantes :"
        urls = [
            "https://site.actionlogement.fr/aide/louer/logement-social/salarie/guides",
            "https://www.actionlogement.fr/faq",
            "https://mobilijeune.actionlogement.fr/faq"
        ]
        for url in urls:
            context += f"\n- {url}"
        
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Vous √™tes un assistant utile."},
                {"role": "user", "content": f"Question : {question}\nContexte : {context}\nR√©ponse :"}
            ],
            max_tokens=150
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration de la r√©ponse avec GPT : {e}")
        return None

# D√©finir les mots de passe en clair
plain_passwords = {
    "username1": "eveille1",
    "username2": "eveille2"
}

# Hasher les mots de passe avec bcrypt
hashed_passwords = {username: bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                    for username, password in plain_passwords.items()}

# Cr√©er le dictionnaire des identifiants avec les mots de passe hach√©s
credentials = {
    "usernames": {
        "username1": {"name": "Rym", "password": hashed_passwords["username1"]},
        "username2": {"name": "Sidik", "password": hashed_passwords["username2"]}
    }
}

# Initialiser l'objet d'authentification
authenticator = stauth.Authenticate(
    credentials=credentials,
    cookie_name='ac44899db8472c2e',
    cookie_key='6a69f0e95409402ebc2ba43bec19cd62',
    cookie_expiry_days=200
)

# Ajouter un logo √† la barre lat√©rale
st.sidebar.image("lg.png", use_column_width=True)

# Ajouter la pr√©sentation avant la connexion
st.sidebar.markdown("""
#### Cette plateforme est destin√©e au mod√©rateur.
""")

# Utiliser correctement le param√®tre fields dans la m√©thode login
name, authentication_status, username = authenticator.login(
    fields={'username': 'Nom d\'utilisateur', 'password': 'Mot de passe', 'submit': 'Se connecter'}
)

# Afficher le bouton de d√©connexion si l'utilisateur est authentifi√©
if authentication_status:
    # Ajouter les boutons pour g√©n√©rer les messages
    if st.sidebar.button('Message de remont√©e'):
        st.sidebar.write("""
        Nous avons bien re√ßu votre message. Afin de pouvoir interroger le service en charge de votre demande, pourriez-vous nous indiquer textuellement votre nom, pr√©nom, adresse mail li√©e √† votre demande et num√©ro de dossier s‚Äôil vous pla√Æt ? En vous remerciant par avance. Bien cordialement, ^
        """)
    if st.sidebar.button('Remont√©e effectu√©e'):
        st.sidebar.write("""
        Nous avons bien re√ßu votre message et vous remercions pour ces informations. Nous allons interroger le service concern√© par votre probl√©matique. Nous reviendrons vers vous d√®s que nous avons un retour. En nous excusant de la g√™ne occasionn√©e. Bien cordialement, ^
        """)
    if st.sidebar.button('T√©l√©phone'):
        st.sidebar.write("""
        Bonjour, nous avons bien re√ßu votre message. Vous pouvez nous contacter au 0970 800 800 (appel non surtax√©), du lundi au vendredi, de 9h √† 18h. 
        Autrement, voici la liste de nos agences et leurs coordonn√©es : https://www.actionlogement.fr/implantations 
        Bien cordialement, ^
        """)
    st.sidebar.markdown("<div style='text-align: center;'>", unsafe_allow_html=True)
    authenticator.logout('Se d√©connecter', 'sidebar')
    st.sidebar.markdown("</div>", unsafe_allow_html=True)
    
    st.success(f'Bienvenue {name} !')
    
    # Charger et pr√©traiter les donn√©es
    df = load_data('datat.csv')
    df = preprocess_data(df)

    # Charger les embeddings des questions
    question_embeddings = load_embeddings(df)

    st.title("I'm Mox üëΩ, ton pote pour la GRC.")
    user_question = st.text_input("Posez votre question:")

    if st.button('Obtenir une r√©ponse'):
        if user_question:
            most_similar_question, similarity_score = find_most_similar_question(user_question, df, question_embeddings)
            if most_similar_question and similarity_score > 0.7:
                response_row = df[df['Questions'] == most_similar_question].iloc[0]
                st.write(f"Question la plus similaire : {most_similar_question}")
                st.write("R√©ponses :", response_row['R√©ponses'])
                st.write("Services :", response_row['Services'])
                st.write("Probl√©matiques :", response_row['Probl√©matiques'])
            elif similarity_score <= 0.5:
                fallback_response = generate_fallback_response(user_question)
                if fallback_response:
                    st.write("R√©ponse g√©n√©r√©e par GPT-4 :", fallback_response)
                else:
                    st.error("Impossible de g√©n√©rer une r√©ponse, veuillez contacter le support.")
            else:
                st.error("La question ne correspond √† aucune question dans la base de donn√©es.")
        else:
            st.error("Veuillez entrer une question pour obtenir une r√©ponse.")
elif authentication_status is False:
    st.error("Acc√®s refus√©. Identifiants incorrects.")
elif authentication_status is None:
    st.info("Veuillez entrer vos identifiants pour vous connecter.")
